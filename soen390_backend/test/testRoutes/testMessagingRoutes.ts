import * as mocha from "mocha";
import app from "../../src/index";
import request from "supertest";

const it = mocha.it;
console.log(app);
const url = "http://localhost:4000";
let server: any;

describe("Test Messaging Routes", function () {
    before(function () {
        server = app.listen(4000);
    });

    after(function () {
        server.close();
    });

    describe("Get Message/sendMessage", function () {
        let usersIds = '["6Xwu7LcLPdqkBgwJa6EM","lZioJzyfCxPy28CTyT9E"]';
        let msg = "test message generated by test suite in messaging routes";
        let senderId = "6Xwu7LcLPdqkBgwJa6EM";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';

        it("responds with 200 if the the conversation emails exist, the sender email exist and if the mesage given is not null ", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${senderId}&Ids=${usersIds}&message=${msg}`
                )
                .expect(200);
        });
        it("responds with 500 if the senderemail is invalid", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${wrongSenderId}&Ids=${usersIds}&message=${msg}`
                )
                .expect(500);
        });
        it("responds with 500 if the conversation emails are invalid", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${senderId}&Ids=${wrongUsersIds}&message=${msg}`
                )
                .expect(500);
        });
        it("responds with 500 if the message content is empty", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${wrongSenderId}&Ids=${usersIds}&message=}`
                )
                .expect(500);
        });
    });

    describe("Get Message/GetAllMessages", function () {
        let usersIds = '["6Xwu7LcLPdqkBgwJa6EM","lZioJzyfCxPy28CTyT9E"]';
        let senderId = "6Xwu7LcLPdqkBgwJa6EM";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';

        it("responds with 200 if the the conversation emails exist, the sender email exist and if the mesage given is not null ", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${senderId}&userIds=${usersIds}`
                )
                .expect(200);
        });
        it("responds with 500 if the sender email is invalid", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${wrongSenderId}&userIds=${usersIds}`
                )
                .expect(500);
        });
        it("responds with 500 if the conversation emails are invalid or the conversation does not exsit", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${senderId}&userIds=${wrongUsersIds}`
                )
                .expect(500);
        });
    });

    describe("Get Message/updateMessages", function () {
        let usersIds = '["6Xwu7LcLPdqkBgwJa6EM","lZioJzyfCxPy28CTyT9E"]';
        let senderId = "6Xwu7LcLPdqkBgwJa6EM";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';
        let wrongMsgLength = -1;

        it("responds with 200 if the the conversation emails exist, the sender email exist and is oits a non negative messages length ", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${senderId}&messagesLength=2`
                )
                .expect(200);
        });

        it("responds with 500 if the sender email is invalid", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${wrongSenderId}.com&messagesLength=2`
                )
                .expect(500);
        });

        it("responds with 500 if the conversation emails are invalid or the conversation does not exsit", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${wrongUsersIds}&senderId=${senderId}.com&messagesLength=2`
                )
                .expect(500);
        });

        it("responds with 500 if messages lenght are smaller than 0", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${senderId}.com&messagesLength=${wrongMsgLength}`
                )
                .expect(400);
        });
    });

    describe("Get messages/getActiveConversation", function () {
        it("responds with 200 if the the conversation emails exist, the sender email exist and is oits a non negative messages length ", async function () {
            await request(url)
                .get(
                    `/messages/getActiveConversation?id=6Xwu7LcLPdqkBgwJa6EM&returnEmail=`
                )
                .expect(200);
        });
    });

    describe("Get messages/creataConversation", function () {
        it("responds with 500 if the the conversation emails does not exist and if the emails attacher are non valid ones ", async function () {
            await request(url)
                .get(
                    `/messages/createConversation?ids=["msg1001@test.com","msg3@test.com"]`
                )
                .expect(500);
        });
    });
});
