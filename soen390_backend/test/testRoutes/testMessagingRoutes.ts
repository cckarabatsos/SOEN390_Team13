import * as mocha from "mocha";
import app from "../../src/index";
import request from "supertest";

const it = mocha.it;
console.log(app);
const url = "http://localhost:4000";
let server: any;

describe("Test Messaging Routes", function () {
    before(function () {
        server = app.listen(4000);
    });

    after(function () {
        server.close();
    });

    describe("Get Message/sendMessage", function () {
        let usersIds = '["16tBPk9x7AgwCCIeVXvh","xRKtdI2Nq8Vu18GGj6fc"]';
        let senderId = "xRKtdI2Nq8Vu18GGj6fc";
        let msg = "test message generated by test suite in messaging routes";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';

        it("responds with 200 if the the conversation emails exist, the sender email exist and if the mesage given is not null ", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${senderId}&Ids=${usersIds}&message=${msg}`
                )
                .expect(200);
        });
        it("responds with 500 if the senderemail is invalid", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${wrongSenderId}&Ids=${usersIds}&message=${msg}`
                )
                .expect(500);
        });
        it("responds with 500 if the conversation emails are invalid", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${senderId}&Ids=${wrongUsersIds}&message=${msg}`
                )
                .expect(500);
        });
        it("responds with 500 if the message content is empty", async function () {
            await request(url)
                .get(
                    `/messages/sendMessage?senderId=${wrongSenderId}&Ids=${usersIds}&message=}`
                )
                .expect(500);
        });
    });

    describe("Get Message/GetAllMessages", function () {
        let usersIds = '["16tBPk9x7AgwCCIeVXvh","xRKtdI2Nq8Vu18GGj6fc"]';
        let senderId = "xRKtdI2Nq8Vu18GGj6fc";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';

        it("responds with 200 if the the conversation emails exist, the sender email exist and if the mesage given is not null ", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${senderId}&userIds=${usersIds}`
                )
                .expect(200);
        });
        it("responds with 500 if the sender email is invalid", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${wrongSenderId}&userIds=${usersIds}`
                )
                .expect(500);
        });
        it("responds with 500 if the conversation emails are invalid or the conversation does not exsit", async function () {
            await request(url)
                .get(
                    `/messages/getAllMessages?senderId=${senderId}&userIds=${wrongUsersIds}`
                )
                .expect(500);
        });
    });

    describe("Get Message/updateMessages", function () {
        let usersIds = '["16tBPk9x7AgwCCIeVXvh","xRKtdI2Nq8Vu18GGj6fc"]';
        let senderId = "xRKtdI2Nq8Vu18GGj6fc";
        let wrongSenderId = "bad@test.com";
        let wrongUsersIds = '["msg1001@test.com","msg3@test.com"]';
        let wrongMsgLength = -1;

        it("responds with 200 if the the conversation emails exist, the sender email exist and is oits a non negative messages length ", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${senderId}&messagesLength=2`
                )
                .expect(200);
        });

        it("responds with 500 if the sender email is invalid", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${wrongSenderId}.com&messagesLength=2`
                )
                .expect(500);
        });

        it("responds with 500 if the conversation emails are invalid or the conversation does not exsit", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${wrongUsersIds}&senderId=${senderId}.com&messagesLength=2`
                )
                .expect(500);
        });

        it("responds with 500 if messages lenght are smaller than 0", async function () {
            await request(url)
                .get(
                    `/messages/updateMessages?userIds=${usersIds}&senderId=${senderId}.com&messagesLength=${wrongMsgLength}`
                )
                .expect(400);
        });
    });

    describe("Get messages/getActiveConversation", function () {
        it("responds with 200 if the the conversation emails exist, the sender email exist and is oits a non negative messages length ", async function () {
            await request(url)
                .get(
                    `/messages/getActiveConversation?id=gvox7y6XFH0iF5sjbnRJ&returnEmail=`
                )
                .expect(200);
        });
    });

    describe("Get messages/creataConversation", function () {
        it("responds with 500 if the the conversation emails does not exist and if the emails attacher are non valid ones ", async function () {
            await request(url)
                .get(
                    `/messages/createConversation?ids=["msg1001@test.com","msg3@test.com"]`
                )
                .expect(500);
        });
    });
    describe("Get messages/id/:conversationID", function () {
        it("responds with 200 if the conversation ID is valid", async function () {
            const conversationID = "8oreYEqQoCVN7ybaVPE1";
            await request(url)
                .get(`/messages/id/${conversationID}`)
                .expect(200);
        });

        it("responds with 400 if the conversation ID is invalid", async function () {
            const conversationID = "invalid_id";
            await request(url)
                .get(`/messages/id/${conversationID}`)
                .expect(404);
        });
    });
    describe("Get Download Document", function () {
        it("responds with decrypted document content if request parameters are valid", async function () {
            await request(url)
                .get(
                    `/messages/downloadDocument?encryptedUrl=Hicp2oJ5UmMw0gdTNAu%2BX6ucTmqefF%2FYFGE%2FBOB7lWHkN1GJ%2BHPhVBw2f4L4R%2FKMvr4Y9jDOG%2BtS2GpD6QciJqziC5%2FJjzmNBC588GezdxCSw6jSHAaJmUPVpJDPFt%2BjqCx249ItZUdB7Xy%2F0zR%2BFk%2FismJVp5MHMJN9JqCT4GEZXrFkl%2BpFqjyoFjYp9bmXwHX4ZglYrxf0deg%2BctH3GwIYpT6UzuS9zjDNIemH0C0xCbbfjs8aEwUXWNbJn%2FkY&conversationID=UCoA5lmz3FGIBjlRhuyG`
                )
                .expect(200)
                .expect("Content-Type", "text/plain; charset=utf-8")
                .expect(
                    "https://firebasestorage.googleapis.com/v0/b/soen-390-7f4fc.appspot.com/o/Messages%2FUCoA5lmz3FGIBjlRhuyG-4-Resume.pdf?alt=media&token=a11a2959-c0df-4884-9050-a396b0391c44"
                );
        });

        it("responds with a 500 error if the encrypted URL is invalid", async function () {
            await request(url)
                .get(
                    `/messages/downloadDocument?encryptedUrl=invalid&conversationID=UCoA5lmz3FGIBjlRhuyG`
                )
                .expect(500)
                .expect("Error decrypting file");
        });

        it("responds with a 500 error if the conversation ID is invalid", async function () {
            await request(url)
                .get(
                    `/messages/downloadDocument?encryptedUrl=D8Vs4bFGQ8ILdVxCzoJsTnKh56bghPRsfPX9EEGNxr3bmGpmsMRp1yBWO0FJvsL2MmqVC4qVavc1oe9v6LOFfIuLW2jFHGA1xV%2BkBijc8Nm1YYtjR5lPVC%2FTx1%2FJMUgW%2BFM7eYmqff7xGHrh4PZ1m4WbGsxrhD5TByyETa77%2Fn3EgT%2BeK0iSssHvoD3njTGMJHsNCTv51W%2BPlio%2Bpf72ES8RFD3LKdvk8ni5a07PYhpKxfO45NLb0y936qhN5hJ4&conversationID=invalid`
                )
                .expect(500)
                .expect("Error decrypting file");
        });
    });
});
